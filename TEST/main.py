# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class FreeWindow(QtWidgets.QWidget):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.setWindowFlag(QtCore.Qt.WindowType.WindowStaysOnTopHint | QtCore.Qt.WindowType.FramelessWindowHint)  # | Qt.WindowType.WindowTransparentForInput)
        # self.setMouseTracking(True)
        self.setAttribute(QtCore.Qt.WidgetAttribute.WA_TranslucentBackground)

        screen = QtGui.QGuiApplication.primaryScreen()
        self.screen_width = screen.availableVirtualGeometry().width()
        self.screen_height = screen.availableVirtualGeometry().height()

        self.start_pos = None

        self.gridLayout = None
        self.color_bar = None
        self.display_bar = None
        self.display_bar_hide_timer = None

        self.setup_ui()

    def setup_ui(self):
        self.setObjectName("FreeWindow")
        self.resize(100, 40)

        self.gridLayout = QtWidgets.QGridLayout(self)
        self.gridLayout.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")

        self.color_bar = QtWidgets.QLabel(parent=self)
        self.color_bar.setStyleSheet("background-color: rgb(0, 255, 0);")
        self.color_bar.setObjectName("color_bar")
        self.gridLayout.addWidget(self.color_bar, 0, 0, 1, 1)

        self.display_bar = QtWidgets.QLabel(parent=self)
        self.display_bar.setStyleSheet("background-color: rgb(255, 0, 0);")
        self.display_bar.setObjectName("display_bar")
        self.gridLayout.addWidget(self.display_bar, 0, 1, 1, 1)

        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(lambda :self.display_bar.hide if self.display_bar.isHidden() else None)
        self.timer.start()

        self.gridLayout.setColumnMinimumWidth(0, 1)
        self.gridLayout.setColumnStretch(1, 1)

        self.retranslate_ui()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslate_ui(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("FreeWindow", "FreeWindow-1.0.0-<white-eel>"))
        self.color_bar.setText(_translate("FreeWindow", " "))
        self.display_bar.setText(_translate("FreeWindow", "TextLabel"))

    def mouseMoveEvent(self, event):  # 鼠标移动事件
        if event.buttons() == QtCore.Qt.MouseButton.LeftButton:
            self_pos = self.pos() + (event.pos() - self.start_pos)
            self.move(self_pos)

    def mousePressEvent(self, event):  # 鼠标按下事件
        event_button = event.button()
        if event_button == QtCore.Qt.MouseButton.LeftButton:
            self.start_pos = event.pos()
        if event_button == QtCore.Qt.MouseButton.RightButton:
            print('实例化 菜单栏')

    def mouseReleaseEvent(self, event):  # 鼠标释放事件
        if self.pos().x() <= 0:
            self.move(0, self.pos().y())
        elif self.pos().x() + self.width() >= self.screen_width:
            self.move(self.screen_width - self.width(), self.pos().y())
        if self.pos().y() <= 0:
            self.move(self.pos().x(), 0)
        elif self.pos().y() + self.height() >= self.screen_height:
            self.move(self.pos().x(), self.screen_height - self.height())

    def enterEvent(self, event):  # 鼠标移进入当前控件
        self_pos = self.pos()
        self_pos_x = self_pos.x()
        self_pos_y = self_pos.y()
        self_width = self.width()
        if self_pos_x + self_width >= self.screen_width:  # 右边 隐藏 判断
            self.display_bar.show()
            self.move(self.screen_width - self.width(), self_pos_y)
        elif self_pos_x <= 0:  # 左边 隐藏 判断
            self.display_bar.show()

    def leaveEvent(self, event):  # 鼠标移出入当前控件
        self_pos = self.pos()
        self_pos_x = self_pos.x()
        self_pos_y = self_pos.y()
        self_width = self.width()
        self_height = self.height()
        color_bar_width = self.color_bar.width()
        if self_pos_x + self_width >= self.screen_width:  # 右边 隐藏 判断
            self.display_bar.hide()
            self.move(self.screen_width - color_bar_width, self_pos_y)
            self.resize(color_bar_width, self_height)
        elif self_pos_x <= 0:  # 左边 隐藏 判断
            self.display_bar.setHidden(True)
            self.move(0, self_pos_y)
            self.resize(4, self_height)





if __name__ == "__main__":

    import sys
    from PyQt6.QtWidgets import QApplication
    app = QApplication([])

    window = FreeWindow()

    window.show()
    # window.showMinimized()
    # window.showMaximized()
    # window.showFullScreen()  # 使用此方法直接覆盖全屏 包括任务栏

    sys.exit(app.exec())

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class FreeWindow(QtWidgets.QWidget):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.setWindowFlag(QtCore.Qt.WindowType.WindowStaysOnTopHint | QtCore.Qt.WindowType.FramelessWindowHint)  # | Qt.WindowType.WindowTransparentForInput)
        # self.setMouseTracking(True)
        self.setAttribute(QtCore.Qt.WidgetAttribute.WA_TranslucentBackground)

        screen = QtGui.QGuiApplication.primaryScreen()
        self.screen_width = screen.availableVirtualGeometry().width()
        self.screen_height = screen.availableVirtualGeometry().height()

        self.start_pos = None

        self.gridLayout = None
        self.color_bar = None
        self.display_bar = None
        self.display_bar_hide_timer = None

        self.setup_ui()

    def setup_ui(self):
        self.setObjectName("FreeWindow")
        self.resize(100, 40)

        self.gridLayout = QtWidgets.QGridLayout(self)
        self.gridLayout.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")

        self.color_bar = QtWidgets.QLabel(parent=self)
        self.color_bar.setStyleSheet("background-color: rgb(0, 255, 0);")
        self.color_bar.setObjectName("color_bar")
        self.gridLayout.addWidget(self.color_bar, 0, 0, 1, 1)

        self.display_bar = QtWidgets.QLabel(parent=self)
        self.display_bar.setStyleSheet("background-color: rgb(255, 0, 0);")
        self.display_bar.setObjectName("display_bar")
        self.gridLayout.addWidget(self.display_bar, 0, 1, 1, 1)

        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(lambda :self.display_bar.hide if self.display_bar.isHidden() else None)
        self.timer.start()

        self.gridLayout.setColumnMinimumWidth(0, 1)
        self.gridLayout.setColumnStretch(1, 1)

        self.retranslate_ui()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslate_ui(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("FreeWindow", "FreeWindow-1.0.0-<white-eel>"))
        self.color_bar.setText(_translate("FreeWindow", " "))
        self.display_bar.setText(_translate("FreeWindow", "TextLabel"))

    def mouseMoveEvent(self, event):  # 鼠标移动事件
        if event.buttons() == QtCore.Qt.MouseButton.LeftButton:
            self_pos = self.pos() + (event.pos() - self.start_pos)
            self.move(self_pos)

    def mousePressEvent(self, event):  # 鼠标按下事件
        event_button = event.button()
        if event_button == QtCore.Qt.MouseButton.LeftButton:
            self.start_pos = event.pos()
        if event_button == QtCore.Qt.MouseButton.RightButton:
            print('实例化 菜单栏')

    def mouseReleaseEvent(self, event):  # 鼠标释放事件
        if self.pos().x() <= 0:
            self.move(0, self.pos().y())
        elif self.pos().x() + self.width() >= self.screen_width:
            self.move(self.screen_width - self.width(), self.pos().y())
        if self.pos().y() <= 0:
            self.move(self.pos().x(), 0)
        elif self.pos().y() + self.height() >= self.screen_height:
            self.move(self.pos().x(), self.screen_height - self.height())

    def enterEvent(self, event):  # 鼠标移进入当前控件
        self_pos = self.pos()
        self_pos_x = self_pos.x()
        self_pos_y = self_pos.y()
        self_width = self.width()
        if self_pos_x + self_width >= self.screen_width:  # 右边 隐藏 判断
            self.display_bar.show()
            self.move(self.screen_width - self.width(), self_pos_y)
        elif self_pos_x <= 0:  # 左边 隐藏 判断
            self.display_bar.show()

    def leaveEvent(self, event):  # 鼠标移出入当前控件
        self_pos = self.pos()
        self_pos_x = self_pos.x()
        self_pos_y = self_pos.y()
        self_width = self.width()
        self_height = self.height()
        color_bar_width = self.color_bar.width()
        if self_pos_x + self_width >= self.screen_width:  # 右边 隐藏 判断
            self.display_bar.hide()
            self.move(self.screen_width - color_bar_width, self_pos_y)
            self.resize(color_bar_width, self_height)
        elif self_pos_x <= 0:  # 左边 隐藏 判断
            self.display_bar.setHidden(True)
            self.move(0, self_pos_y)
            self.resize(4, self_height)





if __name__ == "__main__":

    import sys
    from PyQt6.QtWidgets import QApplication
    app = QApplication([])

    window = FreeWindow()

    window.show()
    # window.showMinimized()
    # window.showMaximized()
    # window.showFullScreen()  # 使用此方法直接覆盖全屏 包括任务栏

    sys.exit(app.exec())

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class FreeWindow(QtWidgets.QWidget):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.setWindowFlag(QtCore.Qt.WindowType.WindowStaysOnTopHint | QtCore.Qt.WindowType.FramelessWindowHint)  # | Qt.WindowType.WindowTransparentForInput)
        # self.setMouseTracking(True)
        self.setAttribute(QtCore.Qt.WidgetAttribute.WA_TranslucentBackground)

        screen = QtGui.QGuiApplication.primaryScreen()
        self.screen_width = screen.availableVirtualGeometry().width()
        self.screen_height = screen.availableVirtualGeometry().height()

        self.start_pos = None

        self.gridLayout = None
        self.color_bar = None
        self.display_bar = None
        self.display_bar_hide_timer = None

        self.setup_ui()

    def setup_ui(self):
        self.setObjectName("FreeWindow")
        self.resize(100, 40)

        self.gridLayout = QtWidgets.QGridLayout(self)
        self.gridLayout.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")

        self.color_bar = QtWidgets.QLabel(parent=self)
        self.color_bar.setStyleSheet("background-color: rgb(0, 255, 0);")
        self.color_bar.setObjectName("color_bar")
        self.gridLayout.addWidget(self.color_bar, 0, 0, 1, 1)

        self.display_bar = QtWidgets.QLabel(parent=self)
        self.display_bar.setStyleSheet("background-color: rgb(255, 0, 0);")
        self.display_bar.setObjectName("display_bar")
        self.gridLayout.addWidget(self.display_bar, 0, 1, 1, 1)

        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(lambda :self.display_bar.hide if self.display_bar.isHidden() else None)
        self.timer.start()

        self.gridLayout.setColumnMinimumWidth(0, 1)
        self.gridLayout.setColumnStretch(1, 1)

        self.retranslate_ui()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslate_ui(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("FreeWindow", "FreeWindow-1.0.0-<white-eel>"))
        self.color_bar.setText(_translate("FreeWindow", " "))
        self.display_bar.setText(_translate("FreeWindow", "TextLabel"))

    def mouseMoveEvent(self, event):  # 鼠标移动事件
        if event.buttons() == QtCore.Qt.MouseButton.LeftButton:
            self_pos = self.pos() + (event.pos() - self.start_pos)
            self.move(self_pos)

    def mousePressEvent(self, event):  # 鼠标按下事件
        event_button = event.button()
        if event_button == QtCore.Qt.MouseButton.LeftButton:
            self.start_pos = event.pos()
        if event_button == QtCore.Qt.MouseButton.RightButton:
            print('实例化 菜单栏')

    def mouseReleaseEvent(self, event):  # 鼠标释放事件
        if self.pos().x() <= 0:
            self.move(0, self.pos().y())
        elif self.pos().x() + self.width() >= self.screen_width:
            self.move(self.screen_width - self.width(), self.pos().y())
        if self.pos().y() <= 0:
            self.move(self.pos().x(), 0)
        elif self.pos().y() + self.height() >= self.screen_height:
            self.move(self.pos().x(), self.screen_height - self.height())

    def enterEvent(self, event):  # 鼠标移进入当前控件
        self_pos = self.pos()
        self_pos_x = self_pos.x()
        self_pos_y = self_pos.y()
        self_width = self.width()
        if self_pos_x + self_width >= self.screen_width:  # 右边 隐藏 判断
            self.display_bar.show()
            self.move(self.screen_width - self.width(), self_pos_y)
        elif self_pos_x <= 0:  # 左边 隐藏 判断
            self.display_bar.show()

    def leaveEvent(self, event):  # 鼠标移出入当前控件
        self_pos = self.pos()
        self_pos_x = self_pos.x()
        self_pos_y = self_pos.y()
        self_width = self.width()
        self_height = self.height()
        color_bar_width = self.color_bar.width()
        if self_pos_x + self_width >= self.screen_width:  # 右边 隐藏 判断
            self.display_bar.hide()
            self.move(self.screen_width - color_bar_width, self_pos_y)
            self.resize(color_bar_width, self_height)
        elif self_pos_x <= 0:  # 左边 隐藏 判断
            self.display_bar.setHidden(True)
            self.move(0, self_pos_y)
            self.resize(4, self_height)




if __name__ == "__main__":

    import sys
    from PyQt6.QtWidgets import QApplication
    app = QApplication([])

    window = FreeWindow()

    window.show()
    # window.showMinimized()
    # window.showMaximized()
    # window.showFullScreen()  # 使用此方法直接覆盖全屏 包括任务栏

    sys.exit(app.exec())

